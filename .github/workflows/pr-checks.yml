name: PR Checks

on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches: [main]

jobs:
  lintert:
    name: Linters
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-3.11-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: |
          poetry install --no-interaction --no-root

      - name: Install project
        run: poetry install --no-interaction

      - name: Check __init__.py files
        run: |
          poetry run python .github/check_innit.py

      - name: Run Black
        run: |
          poetry run black --check --diff .

      - name: Run isort
        run: |
          poetry run isort --check-only --diff .

      - name: Run autoflake
        run: |
          poetry run autoflake --check --remove-all-unused-imports --remove-unused-variables --remove-duplicate-keys --ignore-init-module-imports --recursive apps/ config/ manage.py .github/check_innit.py

      - name: Run flake8
        run: |
          poetry run flake8 --select=TMS010,TMS011,TMS012,TMS013,TMS020,TMS021,TMS022 apps/ config/ manage.py .github/check_innit.py

      - name: Install Prettier
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Install Prettier
        run: |
          npm install -g prettier@3.1.0

      - name: Run Prettier
        run: |
          prettier --config .github/.prettierrc --ignore-path .github/.prettierignore --check "**/*.{js,ts,jsx,tsx,json,yaml,yml,md,html,css}" || (echo "::error::Some files need formatting. Run 'prettier --write .' to fix." && exit 1)

  tests:
    name: Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-3.11-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: |
          poetry install --no-interaction --no-root

      - name: Install project
        run: poetry install --no-interaction

      - name: Create .env file for testing
        run: |
          echo "DEBUG=True" > .env
          echo "SECRET_KEY=test-secret-key-for-ci" >> .env
          echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/test_db" >> .env

      - name: Check Django system
        run: |
          poetry run python manage.py check --deploy

      - name: Run Django migrations check
        run: |
          poetry run python manage.py makemigrations --check --dry-run

      - name: Run Django tests
        run: |
          poetry run python manage.py test apps --verbosity=2
